
Module3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  0080022e  0080022e  00001180  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d1  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a72  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfb  00000000  00000000  00002f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00003b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000888  00000000  00000000  0000459a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004e22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	30 c3       	rjmp	.+1632   	; 0x69a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	92 c4       	rjmp	.+2340   	; 0x96e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c4       	rjmp	.+2240   	; 0x912 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	89 c4       	rjmp	.+2322   	; 0x98c <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	18 c4       	rjmp	.+2096   	; 0x8b2 <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3c       	cpi	r26, 0xC5	; 197
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8f d4       	rcall	.+2334   	; 0x9e2 <main>
  c4:	7a c7       	rjmp	.+3828   	; 0xfba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Enable_MCU_WD>:
	else
	value=65536-(2)/timer_period;
	TCNT1=value;			// setting the TCNT initial value
	TCCR1B=(1<<CS12);		// assigning pre_scaler to 256
	TIMSK=(1<<TOIE1);		// enabling the interrupt
	Sleep_and_Wait();
  c8:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <delay_mcu_ms>
  cc:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <delay_mcu_ms+0x1>
  d0:	8e 31       	cpi	r24, 0x1E	; 30
  d2:	91 05       	cpc	r25, r1
  d4:	51 f4       	brne	.+20     	; 0xea <Enable_MCU_WD+0x22>
  d6:	81 b5       	in	r24, 0x21	; 33
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	81 bd       	out	0x21, r24	; 33
  dc:	81 b5       	in	r24, 0x21	; 33
  de:	89 60       	ori	r24, 0x09	; 9
  e0:	81 bd       	out	0x21, r24	; 33
  e2:	81 b5       	in	r24, 0x21	; 33
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	81 bd       	out	0x21, r24	; 33
  e8:	08 95       	ret
  ea:	8a 3f       	cpi	r24, 0xFA	; 250
  ec:	91 05       	cpc	r25, r1
  ee:	51 f4       	brne	.+20     	; 0x104 <Enable_MCU_WD+0x3c>
  f0:	81 b5       	in	r24, 0x21	; 33
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	81 bd       	out	0x21, r24	; 33
  f6:	81 b5       	in	r24, 0x21	; 33
  f8:	8c 60       	ori	r24, 0x0C	; 12
  fa:	81 bd       	out	0x21, r24	; 33
  fc:	81 b5       	in	r24, 0x21	; 33
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	81 bd       	out	0x21, r24	; 33
 102:	08 95       	ret
 104:	81 b5       	in	r24, 0x21	; 33
 106:	88 61       	ori	r24, 0x18	; 24
 108:	81 bd       	out	0x21, r24	; 33
 10a:	81 b5       	in	r24, 0x21	; 33
 10c:	8d 60       	ori	r24, 0x0D	; 13
 10e:	81 bd       	out	0x21, r24	; 33
 110:	81 b5       	in	r24, 0x21	; 33
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	81 bd       	out	0x21, r24	; 33
 116:	08 95       	ret

00000118 <Sleep_and_Wait>:
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	85 bf       	out	0x35, r24	; 53
 11e:	78 94       	sei
 120:	88 95       	sleep
 122:	85 b7       	in	r24, 0x35	; 53
 124:	8f 7d       	andi	r24, 0xDF	; 223
 126:	85 bf       	out	0x35, r24	; 53
 128:	08 95       	ret

0000012a <UserBufferOut>:
 12a:	cf 93       	push	r28
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	88 64       	ori	r24, 0x48	; 72
 130:	8a b9       	out	0x0a, r24	; 10
 132:	e0 e0       	ldi	r30, 0x00	; 0
 134:	0e c0       	rjmp	.+28     	; 0x152 <UserBufferOut+0x28>
 136:	81 50       	subi	r24, 0x01	; 1
 138:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <UserBufferOut+0x12>
 140:	c1 e0       	ldi	r28, 0x01	; 1
 142:	ce 0f       	add	r28, r30
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	eb 5c       	subi	r30, 0xCB	; 203
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	80 81       	ld	r24, Z
 14c:	8c b9       	out	0x0c, r24	; 12
 14e:	e4 df       	rcall	.-56     	; 0x118 <Sleep_and_Wait>
 150:	ec 2f       	mov	r30, r28
 152:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <user_tr_index>
 156:	81 11       	cpse	r24, r1
 158:	ee cf       	rjmp	.-36     	; 0x136 <UserBufferOut+0xc>
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <last_entry>:
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	2a 97       	sbiw	r28, 0x0a	; 10
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <z>
 17a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <z+0x1>
 17e:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 182:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 186:	81 15       	cp	r24, r1
 188:	25 e0       	ldi	r18, 0x05	; 5
 18a:	92 07       	cpc	r25, r18
 18c:	39 f4       	brne	.+14     	; 0x19c <last_entry+0x3e>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 196:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 19a:	10 c0       	rjmp	.+32     	; 0x1bc <last_entry+0x5e>
 19c:	81 15       	cp	r24, r1
 19e:	21 e1       	ldi	r18, 0x11	; 17
 1a0:	92 07       	cpc	r25, r18
 1a2:	39 f4       	brne	.+14     	; 0x1b2 <last_entry+0x54>
 1a4:	8a ee       	ldi	r24, 0xEA	; 234
 1a6:	90 e1       	ldi	r25, 0x10	; 16
 1a8:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 1ac:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <last_entry+0x5e>
 1b2:	02 97       	sbiw	r24, 0x02	; 2
 1b4:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 1b8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 1bc:	8e e0       	ldi	r24, 0x0E	; 14
 1be:	ed ec       	ldi	r30, 0xCD	; 205
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	a5 e3       	ldi	r26, 0x35	; 53
 1c4:	b2 e0       	ldi	r27, 0x02	; 2
 1c6:	01 90       	ld	r0, Z+
 1c8:	0d 92       	st	X+, r0
 1ca:	8a 95       	dec	r24
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <last_entry+0x68>
 1ce:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <z>
 1d2:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <z+0x1>
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	8f 93       	push	r24
 1da:	80 81       	ld	r24, Z
 1dc:	8f 93       	push	r24
 1de:	8b ed       	ldi	r24, 0xDB	; 219
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	9f 93       	push	r25
 1e4:	8f 93       	push	r24
 1e6:	8e 01       	movw	r16, r28
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	1f 93       	push	r17
 1ee:	0f 93       	push	r16
 1f0:	09 d4       	rcall	.+2066   	; 0xa04 <sprintf>
 1f2:	b8 01       	movw	r22, r16
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	fa d3       	rcall	.+2036   	; 0x9ee <strcat>
 1fa:	87 e1       	ldi	r24, 0x17	; 23
 1fc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
 200:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <x>
 204:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <x+0x1>
 208:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 20c:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 210:	8c df       	rcall	.-232    	; 0x12a <UserBufferOut>
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	2a 96       	adiw	r28, 0x0a	; 10
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <mem_dump>:
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	2a 97       	sbiw	r28, 0x0a	; 10
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	87 e1       	ldi	r24, 0x17	; 23
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <new_user_read_char>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	95 e0       	ldi	r25, 0x05	; 5
 258:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 25c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	ee ed       	ldi	r30, 0xDE	; 222
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	a5 e3       	ldi	r26, 0x35	; 53
 268:	b2 e0       	ldi	r27, 0x02	; 2
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <mem_dump+0x36>
 272:	8b e0       	ldi	r24, 0x0B	; 11
 274:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
 278:	58 df       	rcall	.-336    	; 0x12a <UserBufferOut>
 27a:	2f e3       	ldi	r18, 0x3F	; 63
 27c:	8d e0       	ldi	r24, 0x0D	; 13
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <mem_dump+0x4c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <mem_dump+0x56>
 28a:	00 00       	nop
 28c:	80 e9       	ldi	r24, 0x90	; 144
 28e:	8a b9       	out	0x0a, r24	; 10
 290:	1b df       	rcall	.-458    	; 0xc8 <Enable_MCU_WD>
 292:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <x>
 296:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <x+0x1>
 29a:	8b 3e       	cpi	r24, 0xEB	; 235
 29c:	20 e1       	ldi	r18, 0x10	; 16
 29e:	92 07       	cpc	r25, r18
 2a0:	39 f4       	brne	.+14     	; 0x2b0 <mem_dump+0x7c>
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	98 e1       	ldi	r25, 0x18	; 24
 2a6:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 2aa:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <mem_dump+0x8e>
 2b0:	81 15       	cp	r24, r1
 2b2:	99 41       	sbci	r25, 0x19	; 25
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <mem_dump+0x8e>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	95 e0       	ldi	r25, 0x05	; 5
 2ba:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 2be:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 2c2:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <new_user_read_char>
 2c6:	8e 32       	cpi	r24, 0x2E	; 46
 2c8:	a1 f1       	breq	.+104    	; 0x332 <mem_dump+0xfe>
 2ca:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <x>
 2ce:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <x+0x1>
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	8f 93       	push	r24
 2d6:	80 81       	ld	r24, Z
 2d8:	8f 93       	push	r24
 2da:	ff 93       	push	r31
 2dc:	ef 93       	push	r30
 2de:	8a ee       	ldi	r24, 0xEA	; 234
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	8e 01       	movw	r16, r28
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
 2ea:	1f 4f       	sbci	r17, 0xFF	; 255
 2ec:	1f 93       	push	r17
 2ee:	0f 93       	push	r16
 2f0:	89 d3       	rcall	.+1810   	; 0xa04 <sprintf>
 2f2:	b8 01       	movw	r22, r16
 2f4:	85 e3       	ldi	r24, 0x35	; 53
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	7a d3       	rcall	.+1780   	; 0x9ee <strcat>
 2fa:	89 e0       	ldi	r24, 0x09	; 9
 2fc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
 300:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <x>
 304:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <x+0x1>
 308:	02 96       	adiw	r24, 0x02	; 2
 30a:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 30e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 312:	0b df       	rcall	.-490    	; 0x12a <UserBufferOut>
 314:	8f e3       	ldi	r24, 0x3F	; 63
 316:	9d e0       	ldi	r25, 0x0D	; 13
 318:	23 e0       	ldi	r18, 0x03	; 3
 31a:	81 50       	subi	r24, 0x01	; 1
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	20 40       	sbci	r18, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <mem_dump+0xe6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <mem_dump+0xf0>
 324:	00 00       	nop
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	af cf       	rjmp	.-162    	; 0x290 <mem_dump+0x5c>
 332:	2a 96       	adiw	r28, 0x0a	; 10
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <SensorBufferOut>:
 348:	cf 93       	push	r28
 34a:	ea e9       	ldi	r30, 0x9A	; 154
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	88 64       	ori	r24, 0x48	; 72
 352:	80 83       	st	Z, r24
 354:	e0 e0       	ldi	r30, 0x00	; 0
 356:	11 c0       	rjmp	.+34     	; 0x37a <SensorBufferOut+0x32>
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
 35e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 362:	85 ff       	sbrs	r24, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <SensorBufferOut+0x16>
 366:	c1 e0       	ldi	r28, 0x01	; 1
 368:	ce 0f       	add	r28, r30
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e1 5d       	subi	r30, 0xD1	; 209
 36e:	fd 4f       	sbci	r31, 0xFD	; 253
 370:	80 81       	ld	r24, Z
 372:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 376:	d0 de       	rcall	.-608    	; 0x118 <Sleep_and_Wait>
 378:	ec 2f       	mov	r30, r28
 37a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 37e:	81 11       	cpse	r24, r1
 380:	eb cf       	rjmp	.-42     	; 0x358 <SensorBufferOut+0x10>
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <transmit>:
 386:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <__data_end>
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	9e 0f       	add	r25, r30
 38e:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <__data_end>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e1 5d       	subi	r30, 0xD1	; 209
 396:	fd 4f       	sbci	r31, 0xFD	; 253
 398:	80 83       	st	Z, r24
 39a:	d6 df       	rcall	.-84     	; 0x348 <SensorBufferOut>
 39c:	87 ea       	ldi	r24, 0xA7	; 167
 39e:	91 e6       	ldi	r25, 0x61	; 97
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <transmit+0x1a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <transmit+0x20>
 3a6:	00 00       	nop
 3a8:	08 95       	ret

000003aa <initialize_io>:
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	95 e0       	ldi	r25, 0x05	; 5
 3ae:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 3b2:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 3b6:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <x+0x1>
 3ba:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <x>
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	85 bf       	out	0x35, r24	; 53
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 3c8:	96 e0       	ldi	r25, 0x06	; 6
 3ca:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 3ce:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 3d2:	83 e3       	ldi	r24, 0x33	; 51
 3d4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3d8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 3dc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 3e0:	89 b9       	out	0x09, r24	; 9
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	81 bb       	out	0x11, r24	; 17
 3e6:	ea e9       	ldi	r30, 0x9A	; 154
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 69       	ori	r24, 0x90	; 144
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <Disable_Sensors_WD>:
}

void Disable_Sensors_WD(){
	TIMSK&=~(1<<TOIE1);		// disabling the interrupt
 3f2:	87 b7       	in	r24, 0x37	; 55
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	87 bf       	out	0x37, r24	; 55
 3f8:	08 95       	ret

000003fa <CRC3>:
}

char CRC3(char packet)
{
	char temp = packet;
 3fa:	98 2f       	mov	r25, r24
	char G = 0xD4;			// shifted version of G(53) by 2 which becomes 0xD4
	int i;
	
	for(i=0;i<3;i++)
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	07 c0       	rjmp	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		if((temp & 0x80))		// checking if MSB of data has a 0
 402:	99 23       	and	r25, r25
 404:	14 f4       	brge	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			temp ^=G;			// XORing temp with G (generator)
 406:	44 ed       	ldi	r20, 0xD4	; 212
 408:	94 27       	eor	r25, r20
		}
		temp = temp<<1;			// shifting temp by 1 to left
 40a:	99 0f       	add	r25, r25
{
	char temp = packet;
	char G = 0xD4;			// shifted version of G(53) by 2 which becomes 0xD4
	int i;
	
	for(i=0;i<3;i++)
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	23 30       	cpi	r18, 0x03	; 3
 412:	31 05       	cpc	r19, r1
 414:	b4 f3       	brlt	.-20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	}
	
	// shifting temp value right 3 times to make CRC result fit into 5 bits
	temp = temp >>1;
	temp = temp >>1;
	temp = temp >>1;
 416:	96 95       	lsr	r25
 418:	96 95       	lsr	r25
 41a:	96 95       	lsr	r25
	packet |= temp;			// putting CRC result at the end of the current packet
	return packet;
}
 41c:	89 2b       	or	r24, r25
 41e:	08 95       	ret

00000420 <init>:
}

void init()		// Repeat Request func
{
	PACKET_OUT = 0x00;		// Sending reset request to the sensor
	PACKET_OUT = CRC3(PACKET_OUT);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	eb df       	rcall	.-42     	; 0x3fa <CRC3>
 424:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <PACKET_OUT>
	transmit(PACKET_OUT);
 428:	ae df       	rcall	.-164    	; 0x386 <transmit>
 42a:	86 e2       	ldi	r24, 0x26	; 38
	strcpy(user_tr_buffer, "\r\rReset Request sent to the sensors.\r");
 42c:	e2 ef       	ldi	r30, 0xF2	; 242
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	a5 e3       	ldi	r26, 0x35	; 53
 432:	b2 e0       	ldi	r27, 0x02	; 2
 434:	01 90       	ld	r0, Z+
 436:	0d 92       	st	X+, r0
 438:	8a 95       	dec	r24
 43a:	e1 f7       	brne	.-8      	; 0x434 <init+0x14>
 43c:	84 e2       	ldi	r24, 0x24	; 36
	
	// notifying the user that the reset request is sent
	user_tr_index=36;
 43e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
	UserBufferOut();
 442:	73 de       	rcall	.-794    	; 0x12a <UserBufferOut>
 444:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <PACKET_OUT>
	TOS = PACKET_OUT;
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <TOS+0x1>
 44e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <TOS>
 452:	08 95       	ret

00000454 <restart>:
 454:	aa df       	rcall	.-172    	; 0x3aa <initialize_io>

void restart()
{
	// going back to the start point
	initialize_io();
	WD();
 456:	db d0       	rcall	.+438    	; 0x60e <WD>
	init();
 458:	e3 cf       	rjmp	.-58     	; 0x420 <init>
 45a:	08 95       	ret

0000045c <ReceiverUserResponse>:
 45c:	cf 93       	push	r28
}


void ReceiverUserResponse(char fun_num)
{
 45e:	df 93       	push	r29
 460:	d8 2f       	mov	r29, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	2f e3       	ldi	r18, 0x3F	; 63
 464:	3d e0       	ldi	r19, 0x0D	; 13
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	30 40       	sbci	r19, 0x00	; 0
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <ReceiverUserResponse+0xc>
 470:	00 c0       	rjmp	.+0      	; 0x472 <ReceiverUserResponse+0x16>
 472:	00 00       	nop
	_delay_ms(1000);
	UCSR0B = ((1<<RXEN0) | (1<<RXCIE0));	// enabling RX and RXC interrupts
 474:	80 e9       	ldi	r24, 0x90	; 144
 476:	8a b9       	out	0x0a, r24	; 10
	char i = 0;
	char Choice;
	new_user_read_char = "";
 478:	27 e1       	ldi	r18, 0x17	; 23
 47a:	32 e0       	ldi	r19, 0x02	; 2
 47c:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <new_user_read_char>
	
	while (new_user_read_char !='.')
 480:	02 c0       	rjmp	.+4      	; 0x486 <ReceiverUserResponse+0x2a>
	{
		Choice = new_user_read_char;
		Sleep_and_Wait();			// making the MCU sleep and wait for the interrupts
 482:	4a de       	rcall	.-876    	; 0x118 <Sleep_and_Wait>
	char Choice;
	new_user_read_char = "";
	
	while (new_user_read_char !='.')
	{
		Choice = new_user_read_char;
 484:	9c 2f       	mov	r25, r28
	UCSR0B = ((1<<RXEN0) | (1<<RXCIE0));	// enabling RX and RXC interrupts
	char i = 0;
	char Choice;
	new_user_read_char = "";
	
	while (new_user_read_char !='.')
 486:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <new_user_read_char>
 48a:	ce 32       	cpi	r28, 0x2E	; 46
 48c:	d1 f7       	brne	.-12     	; 0x482 <ReceiverUserResponse+0x26>
	{
		Choice = new_user_read_char;
		Sleep_and_Wait();			// making the MCU sleep and wait for the interrupts
	}
	
	UCSR0B &= ~((1 << RXEN0) | (1 << RXCIE0));		// disabling the interrupt
 48e:	8a b1       	in	r24, 0x0a	; 10
 490:	8f 76       	andi	r24, 0x6F	; 111
 492:	8a b9       	out	0x0a, r24	; 10
	
	if(fun_num==1)		// checking the choice from the user menu
 494:	d1 30       	cpi	r29, 0x01	; 1
 496:	e9 f4       	brne	.+58     	; 0x4d2 <ReceiverUserResponse+0x76>
	{
		switch(Choice)
 498:	92 33       	cpi	r25, 0x32	; 50
 49a:	31 f0       	breq	.+12     	; 0x4a8 <ReceiverUserResponse+0x4c>
 49c:	93 33       	cpi	r25, 0x33	; 51
 49e:	39 f0       	breq	.+14     	; 0x4ae <ReceiverUserResponse+0x52>
 4a0:	91 33       	cpi	r25, 0x31	; 49
		{
			case '1': mem_dump();
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <ReceiverUserResponse+0x56>
			break;		// go to memory dump and enable master watchdog
			case '2': Enable_MCU_WD(); last_entry();
 4a4:	c7 de       	rcall	.-626    	; 0x234 <mem_dump>
 4a6:	5a c0       	rjmp	.+180    	; 0x55c <ReceiverUserResponse+0x100>
 4a8:	0f de       	rcall	.-994    	; 0xc8 <Enable_MCU_WD>
			break;		// enable master watchdog and then go to last
 4aa:	59 de       	rcall	.-846    	; 0x15e <last_entry>
			case '3': restart();
 4ac:	57 c0       	rjmp	.+174    	; 0x55c <ReceiverUserResponse+0x100>
 4ae:	d2 df       	rcall	.-92     	; 0x454 <restart>
			break;		//restart
 4b0:	55 c0       	rjmp	.+170    	; 0x55c <ReceiverUserResponse+0x100>
			default: strcpy(user_tr_buffer,"\rError. Enter again: ");
 4b2:	86 e1       	ldi	r24, 0x16	; 22
 4b4:	e8 e1       	ldi	r30, 0x18	; 24
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	a5 e3       	ldi	r26, 0x35	; 53
 4ba:	b2 e0       	ldi	r27, 0x02	; 2
 4bc:	01 90       	ld	r0, Z+
 4be:	0d 92       	st	X+, r0
 4c0:	8a 95       	dec	r24
			user_tr_index=21;
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <ReceiverUserResponse+0x60>
 4c4:	85 e1       	ldi	r24, 0x15	; 21
			UserBufferOut();
 4c6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
			ReceiverUserResponse(1);
 4ca:	2f de       	rcall	.-930    	; 0x12a <UserBufferOut>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	c6 df       	rcall	.-116    	; 0x45c <ReceiverUserResponse>
 4d0:	45 c0       	rjmp	.+138    	; 0x55c <ReceiverUserResponse+0x100>
		}
	}
	else		// the case where the choice is from the sensor delay or user delay
	{
		switch(Choice)
 4d2:	92 33       	cpi	r25, 0x32	; 50
 4d4:	a1 f0       	breq	.+40     	; 0x4fe <ReceiverUserResponse+0xa2>
 4d6:	93 33       	cpi	r25, 0x33	; 51
 4d8:	11 f1       	breq	.+68     	; 0x51e <ReceiverUserResponse+0xc2>
 4da:	91 33       	cpi	r25, 0x31	; 49
 4dc:	81 f5       	brne	.+96     	; 0x53e <ReceiverUserResponse+0xe2>
		{
			// if user delay equals to 0, then store it in the user delay: else store in sensor delay
			case '1': (fun_num == 0) ? (delay_mcu_ms = 30) : (delay_sensor_ms = 500);
 4de:	d1 11       	cpse	r29, r1
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <ReceiverUserResponse+0x94>
 4e2:	8e e1       	ldi	r24, 0x1E	; 30
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <delay_mcu_ms+0x1>
 4ea:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <delay_mcu_ms>
 4ee:	36 c0       	rjmp	.+108    	; 0x55c <ReceiverUserResponse+0x100>
 4f0:	84 ef       	ldi	r24, 0xF4	; 244
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <delay_sensor_ms+0x1>
 4f8:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <delay_sensor_ms>
 4fc:	2f c0       	rjmp	.+94     	; 0x55c <ReceiverUserResponse+0x100>
			break;
			case '2': (fun_num == 0) ? (delay_mcu_ms = 250) : (delay_sensor_ms = 1000);
 4fe:	d1 11       	cpse	r29, r1
 500:	07 c0       	rjmp	.+14     	; 0x510 <ReceiverUserResponse+0xb4>
 502:	8a ef       	ldi	r24, 0xFA	; 250
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <delay_mcu_ms+0x1>
 50a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <delay_mcu_ms>
 50e:	26 c0       	rjmp	.+76     	; 0x55c <ReceiverUserResponse+0x100>
 510:	88 ee       	ldi	r24, 0xE8	; 232
 512:	93 e0       	ldi	r25, 0x03	; 3
 514:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <delay_sensor_ms+0x1>
 518:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <delay_sensor_ms>
 51c:	1f c0       	rjmp	.+62     	; 0x55c <ReceiverUserResponse+0x100>
			break;
			case '3': (fun_num == 0) ? (delay_mcu_ms = 500) : (delay_sensor_ms = 2000);
 51e:	d1 11       	cpse	r29, r1
 520:	07 c0       	rjmp	.+14     	; 0x530 <ReceiverUserResponse+0xd4>
 522:	84 ef       	ldi	r24, 0xF4	; 244
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <delay_mcu_ms+0x1>
 52a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <delay_mcu_ms>
 52e:	16 c0       	rjmp	.+44     	; 0x55c <ReceiverUserResponse+0x100>
 530:	80 ed       	ldi	r24, 0xD0	; 208
 532:	97 e0       	ldi	r25, 0x07	; 7
 534:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <delay_sensor_ms+0x1>
 538:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <delay_sensor_ms>
 53c:	0f c0       	rjmp	.+30     	; 0x55c <ReceiverUserResponse+0x100>
			break;
			default: strcpy(user_tr_buffer,"\rError. Enter again: ");
 53e:	86 e1       	ldi	r24, 0x16	; 22
 540:	e8 e1       	ldi	r30, 0x18	; 24
 542:	f2 e0       	ldi	r31, 0x02	; 2
 544:	a5 e3       	ldi	r26, 0x35	; 53
 546:	b2 e0       	ldi	r27, 0x02	; 2
 548:	01 90       	ld	r0, Z+
 54a:	0d 92       	st	X+, r0
			user_tr_index=21; UserBufferOut();
 54c:	8a 95       	dec	r24
 54e:	e1 f7       	brne	.-8      	; 0x548 <ReceiverUserResponse+0xec>
 550:	85 e1       	ldi	r24, 0x15	; 21
 552:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
			ReceiverUserResponse(fun_num);
 556:	e9 dd       	rcall	.-1070   	; 0x12a <UserBufferOut>
 558:	8d 2f       	mov	r24, r29
 55a:	80 df       	rcall	.-256    	; 0x45c <ReceiverUserResponse>
		}
	}
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <ConfigSlaveWD>:
	}
}

// this func sends and prints a text message to User screen to ask for remote sensor watchdog timer delay
void ConfigSlaveWD(){
	strcpy(user_tr_buffer, MST_SS_MENU);
 562:	8f e3       	ldi	r24, 0x3F	; 63
 564:	e0 e0       	ldi	r30, 0x00	; 0
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	a5 e3       	ldi	r26, 0x35	; 53
 56a:	b2 e0       	ldi	r27, 0x02	; 2
 56c:	01 90       	ld	r0, Z+
 56e:	0d 92       	st	X+, r0
 570:	8a 95       	dec	r24
 572:	e1 f7       	brne	.-8      	; 0x56c <ConfigSlaveWD+0xa>
	user_tr_index=63;
 574:	8f e3       	ldi	r24, 0x3F	; 63
 576:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
	UserBufferOut();			// choosing sensor delay by sending the menu to the user
 57a:	d7 dd       	rcall	.-1106   	; 0x12a <UserBufferOut>
	ReceiverUserResponse(2);	// waiting for response from the user
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	6e df       	rcall	.-292    	; 0x45c <ReceiverUserResponse>
	
	while(EECR&(1<<EEWE));		// waiting for EEPROM to finish the last write operation
 580:	e1 99       	sbic	0x1c, 1	; 28
 582:	fe cf       	rjmp	.-4      	; 0x580 <ConfigSlaveWD+0x1e>
	
	// setting address pointers
	EEARL=0x00;
 584:	1e ba       	out	0x1e, r1	; 30
	EEARL=0x04;
 586:	84 e0       	ldi	r24, 0x04	; 4
 588:	8e bb       	out	0x1e, r24	; 30
	EEDR=delay_sensor_ms;		// writing the EEPROM delay low byte
 58a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <delay_sensor_ms>
 58e:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEWE);		// enabling the master write
 590:	8c b3       	in	r24, 0x1c	; 28
 592:	82 60       	ori	r24, 0x02	; 2
 594:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);		// enabling the write
 596:	8c b3       	in	r24, 0x1c	; 28
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	8c bb       	out	0x1c, r24	; 28
	
	while(EECR&(1<<EEWE));
 59c:	e1 99       	sbic	0x1c, 1	; 28
 59e:	fe cf       	rjmp	.-4      	; 0x59c <ConfigSlaveWD+0x3a>
	EEARL=0x03;
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	8e bb       	out	0x1e, r24	; 30
	EEDR=(delay_sensor_ms>>8);		// writing the EEPROM delay high byte
 5a4:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <delay_sensor_ms+0x1>
 5a8:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEWE);		// enabling the master write
 5aa:	8c b3       	in	r24, 0x1c	; 28
 5ac:	82 60       	ori	r24, 0x02	; 2
 5ae:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);		// enabling the write
 5b0:	8c b3       	in	r24, 0x1c	; 28
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	8c bb       	out	0x1c, r24	; 28
 5b6:	08 95       	ret

000005b8 <ConfigMasterWD>:
	}
}

// if the first 2-byte entry in EEPROM is 0xFFFF, EEPROM content is set high, this func sends a text message to User screen to ask for MCU watchdog timer delay
void ConfigMasterWD(){
	strcpy(user_tr_buffer, MST_WD_MENU);
 5b8:	81 e4       	ldi	r24, 0x41	; 65
 5ba:	e0 e4       	ldi	r30, 0x40	; 64
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	a5 e3       	ldi	r26, 0x35	; 53
 5c0:	b2 e0       	ldi	r27, 0x02	; 2
 5c2:	01 90       	ld	r0, Z+
 5c4:	0d 92       	st	X+, r0
 5c6:	8a 95       	dec	r24
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <ConfigMasterWD+0xa>
	user_tr_index = 65;
 5ca:	81 e4       	ldi	r24, 0x41	; 65
 5cc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
	UserBufferOut();			// sending user delay menu to the user
 5d0:	ac dd       	rcall	.-1192   	; 0x12a <UserBufferOut>
	ReceiverUserResponse(0);	// waiting for the user to enter a delay value
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	43 df       	rcall	.-378    	; 0x45c <ReceiverUserResponse>
	
	while (EECR&(1<<EEWE));		// waiting for EEPROM to finish the last write operation
 5d6:	e1 99       	sbic	0x1c, 1	; 28
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <ConfigMasterWD+0x1e>
	
	// setting address pointers
	EEARH=0x00;
 5da:	1f ba       	out	0x1f, r1	; 31
	EEARL=0x02;
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	8e bb       	out	0x1e, r24	; 30
	EEDR=delay_mcu_ms;		// writing the EEPROM delay low byte
 5e0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <delay_mcu_ms>
 5e4:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEWE);		// enabling the master write
 5e6:	8c b3       	in	r24, 0x1c	; 28
 5e8:	82 60       	ori	r24, 0x02	; 2
 5ea:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);		// enabling the write
 5ec:	8c b3       	in	r24, 0x1c	; 28
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	8c bb       	out	0x1c, r24	; 28
	
	while(EECR&(1<<EEWE));
 5f2:	e1 99       	sbic	0x1c, 1	; 28
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <ConfigMasterWD+0x3a>
	EEARL=0x01;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	8e bb       	out	0x1e, r24	; 30
	EEDR=(delay_mcu_ms>>8);		// writing the EEPROM delay high byte
 5fa:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <delay_mcu_ms+0x1>
 5fe:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEWE);			// enabling the master write
 600:	8c b3       	in	r24, 0x1c	; 28
 602:	82 60       	ori	r24, 0x02	; 2
 604:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);
 606:	8c b3       	in	r24, 0x1c	; 28
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	8c bb       	out	0x1c, r24	; 28
 60c:	08 95       	ret

0000060e <WD>:
	EECR|=(1<<EEWE);		// enabling the write
}

void WD()
{
	while (EECR & (1<< EEWE));		// waiting for EEPROM to finish the last write operation
 60e:	e1 99       	sbic	0x1c, 1	; 28
 610:	fe cf       	rjmp	.-4      	; 0x60e <WD>
	
	// setting address pointers
	EEARH=0x00;					
 612:	1f ba       	out	0x1f, r1	; 31
	EEARL=0x01;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	8e bb       	out	0x1e, r24	; 30
	EECR=(1<<EERE);		// setting read enable 
 618:	8c bb       	out	0x1c, r24	; 28
	
	if(EEDR==0xFF){
 61a:	8d b3       	in	r24, 0x1d	; 29
 61c:	8f 3f       	cpi	r24, 0xFF	; 255
 61e:	39 f4       	brne	.+14     	; 0x62e <WD+0x20>
		EEARL=0x02;		// setting address pointer to the next byte
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	8e bb       	out	0x1e, r24	; 30
		if(EEDR==0xFF){
 624:	8d b3       	in	r24, 0x1d	; 29
 626:	8f 3f       	cpi	r24, 0xFF	; 255
 628:	a1 f4       	brne	.+40     	; 0x652 <WD+0x44>
			ConfigMasterWD();		// calling the config master WD func
 62a:	c6 df       	rcall	.-116    	; 0x5b8 <ConfigMasterWD>
 62c:	12 c0       	rjmp	.+36     	; 0x652 <WD+0x44>
		}
	}
	else{
		delay_mcu_ms=0x100* EEDR;	// putting high byte into delay
 62e:	8d b3       	in	r24, 0x1d	; 29
 630:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <delay_mcu_ms>
 634:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <delay_mcu_ms+0x1>
		EEARL=0x02;				// setting address pointer to next byte
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	8e bb       	out	0x1e, r24	; 30
		delay_mcu_ms+=EEDR;			// putting lower byte into delay
 63c:	2d b3       	in	r18, 0x1d	; 29
 63e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <delay_mcu_ms>
 642:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <delay_mcu_ms+0x1>
 646:	82 0f       	add	r24, r18
 648:	91 1d       	adc	r25, r1
 64a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <delay_mcu_ms+0x1>
 64e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <delay_mcu_ms>
	}
	
	while(EECR & (1<<EEWE));	// waiting for EEPROM to finish the last write operation
 652:	e1 99       	sbic	0x1c, 1	; 28
 654:	fe cf       	rjmp	.-4      	; 0x652 <WD+0x44>
	
	// setting address pointers
	EEARH=0x00;					
 656:	1f ba       	out	0x1f, r1	; 31
	EEARL=0x03;
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	8e bb       	out	0x1e, r24	; 30
	EECR |=(1<<EERE);			// setting read enable
 65c:	8c b3       	in	r24, 0x1c	; 28
 65e:	81 60       	ori	r24, 0x01	; 1
 660:	8c bb       	out	0x1c, r24	; 28
	
	if(EEDR==0xFF){
 662:	8d b3       	in	r24, 0x1d	; 29
 664:	8f 3f       	cpi	r24, 0xFF	; 255
 666:	31 f4       	brne	.+12     	; 0x674 <WD+0x66>
		EEARL=0x04;				// set address pointer to next byte
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	8e bb       	out	0x1e, r24	; 30
		if(EEDR=0xFF){
 66c:	8f ef       	ldi	r24, 0xFF	; 255
			ConfigSlaveWD();		// calling the config slave WD func
 66e:	8d bb       	out	0x1d, r24	; 29
 670:	78 cf       	rjmp	.-272    	; 0x562 <ConfigSlaveWD>
 672:	08 95       	ret
		}
	}
	else{
		delay_sensor_ms=0x100* EEDR;	// putting high byte into delay
 674:	8d b3       	in	r24, 0x1d	; 29
 676:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <delay_sensor_ms>
 67a:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <delay_sensor_ms+0x1>
		EEARL=0x04;					// setting address pointer to next byte
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	8e bb       	out	0x1e, r24	; 30
		delay_sensor_ms+=EEDR;			// putting lower byte into delay
 682:	2d b3       	in	r18, 0x1d	; 29
 684:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <delay_sensor_ms>
 688:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <delay_sensor_ms+0x1>
 68c:	82 0f       	add	r24, r18
 68e:	91 1d       	adc	r25, r1
 690:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <delay_sensor_ms+0x1>
 694:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <delay_sensor_ms>
 698:	08 95       	ret

0000069a <__vector_14>:
	temp = temp >>1;
	packet |= temp;			// putting CRC result at the end of the current packet
	return packet;
}

ISR(TIMER1_OVF_vect){
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	0b b6       	in	r0, 0x3b	; 59
 6a6:	0f 92       	push	r0
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	Disable_Sensors_WD();
 6c0:	98 de       	rcall	.-720    	; 0x3f2 <Disable_Sensors_WD>
	init();			// reinitializing the sensor
 6c2:	ae de       	rcall	.-676    	; 0x420 <init>
 6c4:	ff 91       	pop	r31
}
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0b be       	out	0x3b, r0	; 59
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <CRC_CHECK11>:
 6ea:	80 e0       	ldi	r24, 0x00	; 0

char CRC_CHECK11(){
	int G = 53<<10;	// shifted version of G(53) by 10 which becomes 0xD400
	int temp;
	temp = 0x100* TOS;
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <TOS>
	temp += PACKET_IN;			// storing new coming packet_in (the second one) in the temp too
 6f2:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <PACKET_IN>
 6f6:	82 0f       	add	r24, r18
 6f8:	91 1d       	adc	r25, r1
	
	for(char i=0;i<11;i++){
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <CRC_CHECK11+0x22>
		if((temp & 0x8000)){		// checking if the MSB of data has a 0
 6fe:	99 23       	and	r25, r25
 700:	14 f4       	brge	.+4      	; 0x706 <CRC_CHECK11+0x1c>
			temp ^= G;		// XORing temp with G
 702:	34 ed       	ldi	r19, 0xD4	; 212
 704:	93 27       	eor	r25, r19
		}
		temp = temp <<1;	// shifting temp to left
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
	int G = 53<<10;	// shifted version of G(53) by 10 which becomes 0xD400
	int temp;
	temp = 0x100* TOS;
	temp += PACKET_IN;			// storing new coming packet_in (the second one) in the temp too
	
	for(char i=0;i<11;i++){
 70a:	2f 5f       	subi	r18, 0xFF	; 255
 70c:	2b 30       	cpi	r18, 0x0B	; 11
 70e:	b8 f3       	brcs	.-18     	; 0x6fe <CRC_CHECK11+0x14>
			temp ^= G;		// XORing temp with G
		}
		temp = temp <<1;	// shifting temp to left
	}
	
	if(temp == 0){			// if the check is passed, tenmp==0, return 1
 710:	89 2b       	or	r24, r25
 712:	11 f4       	brne	.+4      	; 0x718 <CRC_CHECK11+0x2e>
		return 1;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	08 95       	ret
	}
	return 0;
 718:	80 e0       	ldi	r24, 0x00	; 0
}
 71a:	08 95       	ret

0000071c <CRC_CHECK3>:

char CRC_CHECK3()
{
	char G = 53 << 2;		// shifted version of G(53) by 2 which becomes 0xD4
	char temp;
	temp = PACKET_IN;
 71c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <PACKET_IN>
	for (char i=0;i<3;i++)
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	06 c0       	rjmp	.+12     	; 0x730 <CRC_CHECK3+0x14>
	{
		if((temp & 0x80))		// checking if the MSB of data has a 0
 724:	88 23       	and	r24, r24
 726:	14 f4       	brge	.+4      	; 0x72c <CRC_CHECK3+0x10>
		{
			temp ^= G;			// XORing temp with G
 728:	24 ed       	ldi	r18, 0xD4	; 212
 72a:	82 27       	eor	r24, r18
		}
		temp = temp << 1;		// shifting temp by 1 to left
 72c:	88 0f       	add	r24, r24
char CRC_CHECK3()
{
	char G = 53 << 2;		// shifted version of G(53) by 2 which becomes 0xD4
	char temp;
	temp = PACKET_IN;
	for (char i=0;i<3;i++)
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	93 30       	cpi	r25, 0x03	; 3
 732:	c0 f3       	brcs	.-16     	; 0x724 <CRC_CHECK3+0x8>
		{
			temp ^= G;			// XORing temp with G
		}
		temp = temp << 1;		// shifting temp by 1 to left
	}
	if(temp==0)			// if the check is passed, tenmp==0, return 1
 734:	81 11       	cpse	r24, r1
 736:	02 c0       	rjmp	.+4      	; 0x73c <CRC_CHECK3+0x20>
	{
		return 1;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
	}
	return 0;
 73c:	80 e0       	ldi	r24, 0x00	; 0
}
 73e:	08 95       	ret

00000740 <SensorTRBufferInit>:

void SensorTRBufferInit()
{
	// making the whole buffer 0
	char i=0;
 740:	80 e0       	ldi	r24, 0x00	; 0
	while(i<5)			// executing 5 times - according to the limit given at the beginning of the program
 742:	06 c0       	rjmp	.+12     	; 0x750 <SensorTRBufferInit+0x10>
	{
		sensor_tr_buffer[i++] = 0x00;
 744:	e8 2f       	mov	r30, r24
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	e1 5d       	subi	r30, 0xD1	; 209
 74a:	fd 4f       	sbci	r31, 0xFD	; 253
 74c:	10 82       	st	Z, r1
 74e:	8f 5f       	subi	r24, 0xFF	; 255

void SensorTRBufferInit()
{
	// making the whole buffer 0
	char i=0;
	while(i<5)			// executing 5 times - according to the limit given at the beginning of the program
 750:	85 30       	cpi	r24, 0x05	; 5
 752:	c0 f3       	brcs	.-16     	; 0x744 <SensorTRBufferInit+0x4>
	{
		sensor_tr_buffer[i++] = 0x00;
	}
}
 754:	08 95       	ret

00000756 <UserTrBufferInit>:

void UserTrBufferInit()
{
	// making the whole buffer 0
	char i = 0;
 756:	80 e0       	ldi	r24, 0x00	; 0
	while(i<128)		// executing 128 times - according to the limit given at the beginning of the program
 758:	06 c0       	rjmp	.+12     	; 0x766 <UserTrBufferInit+0x10>
	{
		user_tr_buffer[i++] = 0x00;
 75a:	e8 2f       	mov	r30, r24
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	eb 5c       	subi	r30, 0xCB	; 203
 760:	fd 4f       	sbci	r31, 0xFD	; 253
 762:	10 82       	st	Z, r1
 764:	8f 5f       	subi	r24, 0xFF	; 255

void UserTrBufferInit()
{
	// making the whole buffer 0
	char i = 0;
	while(i<128)		// executing 128 times - according to the limit given at the beginning of the program
 766:	88 23       	and	r24, r24
 768:	c4 f7       	brge	.-16     	; 0x75a <UserTrBufferInit+0x4>
	{
		user_tr_buffer[i++] = 0x00;
	}
}
 76a:	08 95       	ret

0000076c <logger>:

void logger()
{
	if(z==STACK_LIMIT)		// skipping the part of the memory that is reserved for the stack
 76c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <z>
 770:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <z+0x1>
 774:	8b 3e       	cpi	r24, 0xEB	; 235
 776:	90 41       	sbci	r25, 0x10	; 16
 778:	39 f4       	brne	.+14     	; 0x788 <logger+0x1c>
	{
		z = EXTENDEND_SRAM_START;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	91 e1       	ldi	r25, 0x11	; 17
 77e:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 782:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
 786:	0b c0       	rjmp	.+22     	; 0x79e <logger+0x32>
	}
	else if(&z == EXTENDED_SRAM_LIMIT+1)			// round robin
 788:	8a eb       	ldi	r24, 0xBA	; 186
 78a:	92 e0       	ldi	r25, 0x02	; 2
 78c:	81 15       	cp	r24, r1
 78e:	99 41       	sbci	r25, 0x19	; 25
 790:	31 f4       	brne	.+12     	; 0x79e <logger+0x32>
	{
		z = MEM_START;
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	95 e0       	ldi	r25, 0x05	; 5
 796:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 79a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
	}
	
	if(z <= EXTENDED_SRAM_LIMIT && z >= EXTENDEND_SRAM_START)		// checking the address in the extended memory space
 79e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <z>
 7a2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <z+0x1>
 7a6:	91 51       	subi	r25, 0x11	; 17
 7a8:	81 15       	cp	r24, r1
 7aa:	98 40       	sbci	r25, 0x08	; 8
 7ac:	10 f4       	brcc	.+4      	; 0x7b2 <logger+0x46>
	{
		PORTD = 0x00;			 // turning the chip select on
 7ae:	12 ba       	out	0x12, r1	; 18
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <logger+0x4a>
	}
	else		// otherwise; turning the chip select off
	{
		PORTD = 0x01;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	82 bb       	out	0x12, r24	; 18
	}
	
	*z = TOS;		// writing whatever in the TOS to the memory
 7b6:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <z>
 7ba:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <z+0x1>
 7be:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <TOS>
 7c2:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <TOS+0x1>
 7c6:	91 83       	std	Z+1, r25	; 0x01
 7c8:	80 83       	st	Z, r24
	z++;			// incrementing the pointer value
 7ca:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <z>
 7ce:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <z+0x1>
 7d2:	02 96       	adiw	r24, 0x02	; 2
 7d4:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <z+0x1>
 7d8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <z>
	TOS = 0x40;		// sending the acknowledge signal to the sensor
	TOS = CRC3(TOS);
 7dc:	80 e4       	ldi	r24, 0x40	; 64
 7de:	0d de       	rcall	.-998    	; 0x3fa <CRC3>
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <TOS+0x1>
 7e6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <TOS>
 7ea:	08 95       	ret

000007ec <repeat_request>:


void repeat_request()
{
	PACKET_OUT = 0x60;		// sending a repeat request to the sensor, assigning the packet_out value to repeat
	PACKET_OUT = CRC3(PACKET_OUT);		// calling the CRC3 func with the packet_out
 7ec:	80 e6       	ldi	r24, 0x60	; 96
 7ee:	05 de       	rcall	.-1014   	; 0x3fa <CRC3>
 7f0:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <PACKET_OUT>
	transmit(PACKET_OUT);				// transmitting packet_out
 7f4:	c8 cd       	rjmp	.-1136   	; 0x386 <transmit>
 7f6:	08 95       	ret

000007f8 <service_readout>:
 7f8:	8a e4       	ldi	r24, 0x4A	; 74
}

void service_readout()
{
	strcpy(user_tr_buffer,USER_MENU);		// sending service readout menu to the user
 7fa:	e2 e8       	ldi	r30, 0x82	; 130
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	a5 e3       	ldi	r26, 0x35	; 53
 800:	b2 e0       	ldi	r27, 0x02	; 2
 802:	01 90       	ld	r0, Z+
 804:	0d 92       	st	X+, r0
 806:	8a 95       	dec	r24
 808:	e1 f7       	brne	.-8      	; 0x802 <service_readout+0xa>
	user_tr_index = 72;
 80a:	88 e4       	ldi	r24, 0x48	; 72
 80c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <user_tr_index>
	UserBufferOut();
 810:	8c dc       	rcall	.-1768   	; 0x12a <UserBufferOut>
	ReceiverUserResponse(1);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	23 ce       	rjmp	.-954    	; 0x45c <ReceiverUserResponse>
 816:	08 95       	ret

00000818 <process_packet>:
}

// processing the data packet (packet_in)
void process_packet()
{
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
	PACKET_IN = new_sensor_read_char;		// reading the sensor for the new value and assigning it to packet_in
 81e:	c0 91 b5 02 	lds	r28, 0x02B5	; 0x8002b5 <new_sensor_read_char>
 822:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <PACKET_IN>
	
	if(PACKET_IN & (1<<7))			// checking if the packet_in is data type
 826:	cc 23       	and	r28, r28
 828:	3c f4       	brge	.+14     	; 0x838 <process_packet+0x20>
	{
		TOS = PACKET_IN;
 82a:	8c 2f       	mov	r24, r28
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <TOS+0x1>
 832:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <TOS>
		return;
 836:	39 c0       	rjmp	.+114    	; 0x8aa <process_packet+0x92>
	}
	else		// checking if the packet_in is command type
	{
		if(TOS&(1<<7))		// checking if the TOS has a data packet
 838:	00 91 c2 02 	lds	r16, 0x02C2	; 0x8002c2 <TOS>
 83c:	10 91 c3 02 	lds	r17, 0x02C3	; 0x8002c3 <TOS+0x1>
 840:	07 ff       	sbrs	r16, 7
 842:	18 c0       	rjmp	.+48     	; 0x874 <process_packet+0x5c>
		{
			if(CRC_CHECK11())		// then applying CRC_CHECK11 and checking if it passes or failles
 844:	52 df       	rcall	.-348    	; 0x6ea <CRC_CHECK11>
 846:	88 23       	and	r24, r24
 848:	79 f0       	breq	.+30     	; 0x868 <process_packet+0x50>
			{
				if((PACKET_IN&(0x60))==0x20)		// as it passes the CRC_CHECK11, now checking if the packet_in has log request
 84a:	8c 2f       	mov	r24, r28
 84c:	80 76       	andi	r24, 0x60	; 96
 84e:	80 32       	cpi	r24, 0x20	; 32
				{
					logger();		// if it does have a log request, then writing to the memory
 850:	39 f4       	brne	.+14     	; 0x860 <process_packet+0x48>
 852:	8c df       	rcall	.-232    	; 0x76c <logger>
					PACKET_OUT = TOS;			// assigning packet_out value as the TOS
 854:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <TOS>
 858:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <PACKET_OUT>
					transmit(PACKET_OUT);		// and transmitting the packet_out
				}
				else		// the case where the packet_in doesn't have a log request
				{
					// going back to the main to initialize the stack pointer
					initialize_io();
 85c:	94 dd       	rcall	.-1240   	; 0x386 <transmit>
 85e:	25 c0       	rjmp	.+74     	; 0x8aa <process_packet+0x92>
					WD();
 860:	a4 dd       	rcall	.-1208   	; 0x3aa <initialize_io>
 862:	d5 de       	rcall	.-598    	; 0x60e <WD>
					init();
 864:	dd dd       	rcall	.-1094   	; 0x420 <init>
 866:	21 c0       	rjmp	.+66     	; 0x8aa <process_packet+0x92>
				}
			}
			else		// the case where the CRC_CHECK11 is failed
			{
				TOS = 0x00;		// popping TOS
 868:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <TOS+0x1>
 86c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <TOS>
				repeat_request();		// making the packet_out value repeat, calling the CRC3 func with the packet_out and then transmitting the packet_out
 870:	bd df       	rcall	.-134    	; 0x7ec <repeat_request>
 872:	1b c0       	rjmp	.+54     	; 0x8aa <process_packet+0x92>
				
			}
		}
		else		// the case where TOS does not have a data packet
		{
			if(CRC_CHECK3())		// applying CRC_CHECK3 and checking if it's passed or failed, if pass then go inside the if statement
 874:	53 df       	rcall	.-346    	; 0x71c <CRC_CHECK3>
 876:	88 23       	and	r24, r24
 878:	b9 f0       	breq	.+46     	; 0x8a8 <process_packet+0x90>
 87a:	8c 2f       	mov	r24, r28
 87c:	80 76       	andi	r24, 0x60	; 96
 87e:	80 34       	cpi	r24, 0x40	; 64
			{
				if((PACKET_IN&(0x60))==0x40)		// checking if packet_in has an acknowledge request
 880:	49 f4       	brne	.+18     	; 0x894 <process_packet+0x7c>
				{
					if(TOS!=0x00)			// checking if the stack is (TOS)empty
 882:	01 2b       	or	r16, r17
 884:	29 f0       	breq	.+10     	; 0x890 <process_packet+0x78>
					{
						TOS = 0x00;			// if not, then pop TOS
 886:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <TOS+0x1>
 88a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <TOS>
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <process_packet+0x92>
					}
					else				// if the stack is already empty, then go back to service readout
					{
						service_readout();
 890:	b3 df       	rcall	.-154    	; 0x7f8 <service_readout>
 892:	0b c0       	rjmp	.+22     	; 0x8aa <process_packet+0x92>
					}
				}
				else
				{
					if((PACKET_IN&(0x60))==0x40)	// checking if the packet_in has a repeat request
 894:	80 34       	cpi	r24, 0x40	; 64
					{
						if(TOS!=0x00)			// checking if the stack is (TOS)empty, if not then execute the next lines
 896:	49 f4       	brne	.+18     	; 0x8aa <process_packet+0x92>
 898:	01 15       	cp	r16, r1
 89a:	11 05       	cpc	r17, r1
						{
							PACKET_OUT = TOS;		// initializing the packet_out value to TOS
 89c:	31 f0       	breq	.+12     	; 0x8aa <process_packet+0x92>
 89e:	00 93 b6 02 	sts	0x02B6, r16	; 0x8002b6 <PACKET_OUT>
							transmit(PACKET_OUT);	// transmitting the packet_out
 8a2:	80 2f       	mov	r24, r16
 8a4:	70 dd       	rcall	.-1312   	; 0x386 <transmit>
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <process_packet+0x92>
					}
				}
			}
			else		// the case where the CRC_CHECK3 is failed
			{
				repeat_request();
 8a8:	a1 df       	rcall	.-190    	; 0x7ec <repeat_request>
 8aa:	cf 91       	pop	r28
			}
		}
	}
}
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	08 95       	ret

000008b2 <__vector_32>:
 8b2:	1f 92       	push	r1

// Interrupt handler for USART1 when a TX is done
ISR(USART1_TX_vect)
{
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	0b b6       	in	r0, 0x3b	; 59
 8be:	0f 92       	push	r0
 8c0:	2f 93       	push	r18
 8c2:	3f 93       	push	r19
 8c4:	4f 93       	push	r20
 8c6:	5f 93       	push	r21
 8c8:	6f 93       	push	r22
 8ca:	7f 93       	push	r23
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	af 93       	push	r26
 8d2:	bf 93       	push	r27
 8d4:	ef 93       	push	r30
 8d6:	ff 93       	push	r31
	if(sensor_tr_index==0)
 8d8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 8dc:	81 11       	cpse	r24, r1
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <__vector_32+0x3a>
	{
		SensorTRBufferInit();		// re-initializing the buffer for the next one
 8e0:	2f df       	rcall	.-418    	; 0x740 <SensorTRBufferInit>
		UCSR1B &= ~((1 << TXEN1) | (1 << TXCIE1));		// disabling the interrupt
 8e2:	ea e9       	ldi	r30, 0x9A	; 154
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	87 7b       	andi	r24, 0xB7	; 183
 8ea:	80 83       	st	Z, r24
	}
}
 8ec:	ff 91       	pop	r31
 8ee:	ef 91       	pop	r30
 8f0:	bf 91       	pop	r27
 8f2:	af 91       	pop	r26
 8f4:	9f 91       	pop	r25
 8f6:	8f 91       	pop	r24
 8f8:	7f 91       	pop	r23
 8fa:	6f 91       	pop	r22
 8fc:	5f 91       	pop	r21
 8fe:	4f 91       	pop	r20
 900:	3f 91       	pop	r19
 902:	2f 91       	pop	r18
 904:	0f 90       	pop	r0
 906:	0b be       	out	0x3b, r0	; 59
 908:	0f 90       	pop	r0
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	0f 90       	pop	r0
 90e:	1f 90       	pop	r1
 910:	18 95       	reti

00000912 <__vector_20>:

// Interrupt handler for USART0 when a TX is done
ISR(USART0_TX_vect)
{
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	0b b6       	in	r0, 0x3b	; 59
 91e:	0f 92       	push	r0
 920:	2f 93       	push	r18
 922:	3f 93       	push	r19
 924:	4f 93       	push	r20
 926:	5f 93       	push	r21
 928:	6f 93       	push	r22
 92a:	7f 93       	push	r23
 92c:	8f 93       	push	r24
 92e:	9f 93       	push	r25
 930:	af 93       	push	r26
 932:	bf 93       	push	r27
 934:	ef 93       	push	r30
 936:	ff 93       	push	r31
	if(user_tr_index==0)
 938:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <user_tr_index>
 93c:	81 11       	cpse	r24, r1
 93e:	04 c0       	rjmp	.+8      	; 0x948 <__vector_20+0x36>
	{
		UserTrBufferInit();			// re-initializing the buffer for the next one
 940:	0a df       	rcall	.-492    	; 0x756 <UserTrBufferInit>
		UCSR0B &= ~((1 << TXEN0) | (1 << TXCIE0));		// disabling the interrupt
 942:	8a b1       	in	r24, 0x0a	; 10
 944:	87 7b       	andi	r24, 0xB7	; 183
 946:	8a b9       	out	0x0a, r24	; 10
	}
}
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	bf 91       	pop	r27
 94e:	af 91       	pop	r26
 950:	9f 91       	pop	r25
 952:	8f 91       	pop	r24
 954:	7f 91       	pop	r23
 956:	6f 91       	pop	r22
 958:	5f 91       	pop	r21
 95a:	4f 91       	pop	r20
 95c:	3f 91       	pop	r19
 95e:	2f 91       	pop	r18
 960:	0f 90       	pop	r0
 962:	0b be       	out	0x3b, r0	; 59
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

0000096e <__vector_18>:

// Interrupt handler for USART0 when a RX is done
ISR(USART0_RX_vect)
{
 96e:	1f 92       	push	r1
 970:	0f 92       	push	r0
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	0f 92       	push	r0
 976:	11 24       	eor	r1, r1
 978:	8f 93       	push	r24
	new_user_read_char = UDR0;		// getting a value from the user
 97a:	8c b1       	in	r24, 0x0c	; 12
 97c:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <new_user_read_char>
}
 980:	8f 91       	pop	r24
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_30>:

// Interrupt handler for USART1 when a RX is done
ISR(USART1_RX_vect)
{
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	0b b6       	in	r0, 0x3b	; 59
 998:	0f 92       	push	r0
 99a:	2f 93       	push	r18
 99c:	3f 93       	push	r19
 99e:	4f 93       	push	r20
 9a0:	5f 93       	push	r21
 9a2:	6f 93       	push	r22
 9a4:	7f 93       	push	r23
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
 9aa:	af 93       	push	r26
 9ac:	bf 93       	push	r27
 9ae:	ef 93       	push	r30
 9b0:	ff 93       	push	r31
	//Disable_Sensors_WD();			// disabling the slave watchdog timer
	new_sensor_read_char = UDR1;	// getting a value from the sensor
 9b2:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 9b6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <new_sensor_read_char>
	process_packet();			// receiving the packet from the sensor
 9ba:	2e df       	rcall	.-420    	; 0x818 <process_packet>
}
 9bc:	ff 91       	pop	r31
 9be:	ef 91       	pop	r30
 9c0:	bf 91       	pop	r27
 9c2:	af 91       	pop	r26
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	7f 91       	pop	r23
 9ca:	6f 91       	pop	r22
 9cc:	5f 91       	pop	r21
 9ce:	4f 91       	pop	r20
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	0f 90       	pop	r0
 9d6:	0b be       	out	0x3b, r0	; 59
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <main>:

int main(void)
{
	initialize_io();		// initializing input & output ports
 9e2:	e3 dc       	rcall	.-1594   	; 0x3aa <initialize_io>
	WD();					// watchdog timer master and slave
 9e4:	14 de       	rcall	.-984    	; 0x60e <WD>
	init();					// initializing sensors
 9e6:	1c dd       	rcall	.-1480   	; 0x420 <init>
	service_readout();	// displaying readout menu
 9e8:	07 df       	rcall	.-498    	; 0x7f8 <service_readout>
 9ea:	96 db       	rcall	.-2260   	; 0x118 <Sleep_and_Wait>
	Sleep_and_Wait();
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <main+0xa>

000009ee <strcat>:
 9ee:	fb 01       	movw	r30, r22
 9f0:	dc 01       	movw	r26, r24
 9f2:	0d 90       	ld	r0, X+
 9f4:	00 20       	and	r0, r0
 9f6:	e9 f7       	brne	.-6      	; 0x9f2 <strcat+0x4>
 9f8:	11 97       	sbiw	r26, 0x01	; 1
 9fa:	01 90       	ld	r0, Z+
 9fc:	0d 92       	st	X+, r0
 9fe:	00 20       	and	r0, r0
 a00:	e1 f7       	brne	.-8      	; 0x9fa <strcat+0xc>
 a02:	08 95       	ret

00000a04 <sprintf>:
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	2e 97       	sbiw	r28, 0x0e	; 14
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	0d 89       	ldd	r16, Y+21	; 0x15
 a1e:	1e 89       	ldd	r17, Y+22	; 0x16
 a20:	86 e0       	ldi	r24, 0x06	; 6
 a22:	8c 83       	std	Y+4, r24	; 0x04
 a24:	1a 83       	std	Y+2, r17	; 0x02
 a26:	09 83       	std	Y+1, r16	; 0x01
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	9f e7       	ldi	r25, 0x7F	; 127
 a2c:	9e 83       	std	Y+6, r25	; 0x06
 a2e:	8d 83       	std	Y+5, r24	; 0x05
 a30:	ae 01       	movw	r20, r28
 a32:	47 5e       	subi	r20, 0xE7	; 231
 a34:	5f 4f       	sbci	r21, 0xFF	; 255
 a36:	6f 89       	ldd	r22, Y+23	; 0x17
 a38:	78 8d       	ldd	r23, Y+24	; 0x18
 a3a:	ce 01       	movw	r24, r28
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	10 d0       	rcall	.+32     	; 0xa60 <vfprintf>
 a40:	ef 81       	ldd	r30, Y+7	; 0x07
 a42:	f8 85       	ldd	r31, Y+8	; 0x08
 a44:	e0 0f       	add	r30, r16
 a46:	f1 1f       	adc	r31, r17
 a48:	10 82       	st	Z, r1
 a4a:	2e 96       	adiw	r28, 0x0e	; 14
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	08 95       	ret

00000a60 <vfprintf>:
 a60:	2f 92       	push	r2
 a62:	3f 92       	push	r3
 a64:	4f 92       	push	r4
 a66:	5f 92       	push	r5
 a68:	6f 92       	push	r6
 a6a:	7f 92       	push	r7
 a6c:	8f 92       	push	r8
 a6e:	9f 92       	push	r9
 a70:	af 92       	push	r10
 a72:	bf 92       	push	r11
 a74:	cf 92       	push	r12
 a76:	df 92       	push	r13
 a78:	ef 92       	push	r14
 a7a:	ff 92       	push	r15
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
 a88:	2b 97       	sbiw	r28, 0x0b	; 11
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	6c 01       	movw	r12, r24
 a96:	7b 01       	movw	r14, r22
 a98:	8a 01       	movw	r16, r20
 a9a:	fc 01       	movw	r30, r24
 a9c:	17 82       	std	Z+7, r1	; 0x07
 a9e:	16 82       	std	Z+6, r1	; 0x06
 aa0:	83 81       	ldd	r24, Z+3	; 0x03
 aa2:	81 ff       	sbrs	r24, 1
 aa4:	bf c1       	rjmp	.+894    	; 0xe24 <vfprintf+0x3c4>
 aa6:	ce 01       	movw	r24, r28
 aa8:	01 96       	adiw	r24, 0x01	; 1
 aaa:	3c 01       	movw	r6, r24
 aac:	f6 01       	movw	r30, r12
 aae:	93 81       	ldd	r25, Z+3	; 0x03
 ab0:	f7 01       	movw	r30, r14
 ab2:	93 fd       	sbrc	r25, 3
 ab4:	85 91       	lpm	r24, Z+
 ab6:	93 ff       	sbrs	r25, 3
 ab8:	81 91       	ld	r24, Z+
 aba:	7f 01       	movw	r14, r30
 abc:	88 23       	and	r24, r24
 abe:	09 f4       	brne	.+2      	; 0xac2 <vfprintf+0x62>
 ac0:	ad c1       	rjmp	.+858    	; 0xe1c <vfprintf+0x3bc>
 ac2:	85 32       	cpi	r24, 0x25	; 37
 ac4:	39 f4       	brne	.+14     	; 0xad4 <vfprintf+0x74>
 ac6:	93 fd       	sbrc	r25, 3
 ac8:	85 91       	lpm	r24, Z+
 aca:	93 ff       	sbrs	r25, 3
 acc:	81 91       	ld	r24, Z+
 ace:	7f 01       	movw	r14, r30
 ad0:	85 32       	cpi	r24, 0x25	; 37
 ad2:	21 f4       	brne	.+8      	; 0xadc <vfprintf+0x7c>
 ad4:	b6 01       	movw	r22, r12
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	d6 d1       	rcall	.+940    	; 0xe86 <fputc>
 ada:	e8 cf       	rjmp	.-48     	; 0xaac <vfprintf+0x4c>
 adc:	91 2c       	mov	r9, r1
 ade:	21 2c       	mov	r2, r1
 ae0:	31 2c       	mov	r3, r1
 ae2:	ff e1       	ldi	r31, 0x1F	; 31
 ae4:	f3 15       	cp	r31, r3
 ae6:	d8 f0       	brcs	.+54     	; 0xb1e <vfprintf+0xbe>
 ae8:	8b 32       	cpi	r24, 0x2B	; 43
 aea:	79 f0       	breq	.+30     	; 0xb0a <vfprintf+0xaa>
 aec:	38 f4       	brcc	.+14     	; 0xafc <vfprintf+0x9c>
 aee:	80 32       	cpi	r24, 0x20	; 32
 af0:	79 f0       	breq	.+30     	; 0xb10 <vfprintf+0xb0>
 af2:	83 32       	cpi	r24, 0x23	; 35
 af4:	a1 f4       	brne	.+40     	; 0xb1e <vfprintf+0xbe>
 af6:	23 2d       	mov	r18, r3
 af8:	20 61       	ori	r18, 0x10	; 16
 afa:	1d c0       	rjmp	.+58     	; 0xb36 <vfprintf+0xd6>
 afc:	8d 32       	cpi	r24, 0x2D	; 45
 afe:	61 f0       	breq	.+24     	; 0xb18 <vfprintf+0xb8>
 b00:	80 33       	cpi	r24, 0x30	; 48
 b02:	69 f4       	brne	.+26     	; 0xb1e <vfprintf+0xbe>
 b04:	23 2d       	mov	r18, r3
 b06:	21 60       	ori	r18, 0x01	; 1
 b08:	16 c0       	rjmp	.+44     	; 0xb36 <vfprintf+0xd6>
 b0a:	83 2d       	mov	r24, r3
 b0c:	82 60       	ori	r24, 0x02	; 2
 b0e:	38 2e       	mov	r3, r24
 b10:	e3 2d       	mov	r30, r3
 b12:	e4 60       	ori	r30, 0x04	; 4
 b14:	3e 2e       	mov	r3, r30
 b16:	2a c0       	rjmp	.+84     	; 0xb6c <vfprintf+0x10c>
 b18:	f3 2d       	mov	r31, r3
 b1a:	f8 60       	ori	r31, 0x08	; 8
 b1c:	1d c0       	rjmp	.+58     	; 0xb58 <vfprintf+0xf8>
 b1e:	37 fc       	sbrc	r3, 7
 b20:	2d c0       	rjmp	.+90     	; 0xb7c <vfprintf+0x11c>
 b22:	20 ed       	ldi	r18, 0xD0	; 208
 b24:	28 0f       	add	r18, r24
 b26:	2a 30       	cpi	r18, 0x0A	; 10
 b28:	40 f0       	brcs	.+16     	; 0xb3a <vfprintf+0xda>
 b2a:	8e 32       	cpi	r24, 0x2E	; 46
 b2c:	b9 f4       	brne	.+46     	; 0xb5c <vfprintf+0xfc>
 b2e:	36 fc       	sbrc	r3, 6
 b30:	75 c1       	rjmp	.+746    	; 0xe1c <vfprintf+0x3bc>
 b32:	23 2d       	mov	r18, r3
 b34:	20 64       	ori	r18, 0x40	; 64
 b36:	32 2e       	mov	r3, r18
 b38:	19 c0       	rjmp	.+50     	; 0xb6c <vfprintf+0x10c>
 b3a:	36 fe       	sbrs	r3, 6
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0xea>
 b3e:	8a e0       	ldi	r24, 0x0A	; 10
 b40:	98 9e       	mul	r9, r24
 b42:	20 0d       	add	r18, r0
 b44:	11 24       	eor	r1, r1
 b46:	92 2e       	mov	r9, r18
 b48:	11 c0       	rjmp	.+34     	; 0xb6c <vfprintf+0x10c>
 b4a:	ea e0       	ldi	r30, 0x0A	; 10
 b4c:	2e 9e       	mul	r2, r30
 b4e:	20 0d       	add	r18, r0
 b50:	11 24       	eor	r1, r1
 b52:	22 2e       	mov	r2, r18
 b54:	f3 2d       	mov	r31, r3
 b56:	f0 62       	ori	r31, 0x20	; 32
 b58:	3f 2e       	mov	r3, r31
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <vfprintf+0x10c>
 b5c:	8c 36       	cpi	r24, 0x6C	; 108
 b5e:	21 f4       	brne	.+8      	; 0xb68 <vfprintf+0x108>
 b60:	83 2d       	mov	r24, r3
 b62:	80 68       	ori	r24, 0x80	; 128
 b64:	38 2e       	mov	r3, r24
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <vfprintf+0x10c>
 b68:	88 36       	cpi	r24, 0x68	; 104
 b6a:	41 f4       	brne	.+16     	; 0xb7c <vfprintf+0x11c>
 b6c:	f7 01       	movw	r30, r14
 b6e:	93 fd       	sbrc	r25, 3
 b70:	85 91       	lpm	r24, Z+
 b72:	93 ff       	sbrs	r25, 3
 b74:	81 91       	ld	r24, Z+
 b76:	7f 01       	movw	r14, r30
 b78:	81 11       	cpse	r24, r1
 b7a:	b3 cf       	rjmp	.-154    	; 0xae2 <vfprintf+0x82>
 b7c:	98 2f       	mov	r25, r24
 b7e:	9f 7d       	andi	r25, 0xDF	; 223
 b80:	95 54       	subi	r25, 0x45	; 69
 b82:	93 30       	cpi	r25, 0x03	; 3
 b84:	28 f4       	brcc	.+10     	; 0xb90 <vfprintf+0x130>
 b86:	0c 5f       	subi	r16, 0xFC	; 252
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	9f e3       	ldi	r25, 0x3F	; 63
 b8c:	99 83       	std	Y+1, r25	; 0x01
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <vfprintf+0x14a>
 b90:	83 36       	cpi	r24, 0x63	; 99
 b92:	31 f0       	breq	.+12     	; 0xba0 <vfprintf+0x140>
 b94:	83 37       	cpi	r24, 0x73	; 115
 b96:	71 f0       	breq	.+28     	; 0xbb4 <vfprintf+0x154>
 b98:	83 35       	cpi	r24, 0x53	; 83
 b9a:	09 f0       	breq	.+2      	; 0xb9e <vfprintf+0x13e>
 b9c:	55 c0       	rjmp	.+170    	; 0xc48 <vfprintf+0x1e8>
 b9e:	20 c0       	rjmp	.+64     	; 0xbe0 <vfprintf+0x180>
 ba0:	f8 01       	movw	r30, r16
 ba2:	80 81       	ld	r24, Z
 ba4:	89 83       	std	Y+1, r24	; 0x01
 ba6:	0e 5f       	subi	r16, 0xFE	; 254
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	88 24       	eor	r8, r8
 bac:	83 94       	inc	r8
 bae:	91 2c       	mov	r9, r1
 bb0:	53 01       	movw	r10, r6
 bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <vfprintf+0x178>
 bb4:	28 01       	movw	r4, r16
 bb6:	f2 e0       	ldi	r31, 0x02	; 2
 bb8:	4f 0e       	add	r4, r31
 bba:	51 1c       	adc	r5, r1
 bbc:	f8 01       	movw	r30, r16
 bbe:	a0 80       	ld	r10, Z
 bc0:	b1 80       	ldd	r11, Z+1	; 0x01
 bc2:	36 fe       	sbrs	r3, 6
 bc4:	03 c0       	rjmp	.+6      	; 0xbcc <vfprintf+0x16c>
 bc6:	69 2d       	mov	r22, r9
 bc8:	70 e0       	ldi	r23, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x170>
 bcc:	6f ef       	ldi	r22, 0xFF	; 255
 bce:	7f ef       	ldi	r23, 0xFF	; 255
 bd0:	c5 01       	movw	r24, r10
 bd2:	4e d1       	rcall	.+668    	; 0xe70 <strnlen>
 bd4:	4c 01       	movw	r8, r24
 bd6:	82 01       	movw	r16, r4
 bd8:	f3 2d       	mov	r31, r3
 bda:	ff 77       	andi	r31, 0x7F	; 127
 bdc:	3f 2e       	mov	r3, r31
 bde:	15 c0       	rjmp	.+42     	; 0xc0a <vfprintf+0x1aa>
 be0:	28 01       	movw	r4, r16
 be2:	22 e0       	ldi	r18, 0x02	; 2
 be4:	42 0e       	add	r4, r18
 be6:	51 1c       	adc	r5, r1
 be8:	f8 01       	movw	r30, r16
 bea:	a0 80       	ld	r10, Z
 bec:	b1 80       	ldd	r11, Z+1	; 0x01
 bee:	36 fe       	sbrs	r3, 6
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <vfprintf+0x198>
 bf2:	69 2d       	mov	r22, r9
 bf4:	70 e0       	ldi	r23, 0x00	; 0
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x19c>
 bf8:	6f ef       	ldi	r22, 0xFF	; 255
 bfa:	7f ef       	ldi	r23, 0xFF	; 255
 bfc:	c5 01       	movw	r24, r10
 bfe:	2d d1       	rcall	.+602    	; 0xe5a <strnlen_P>
 c00:	4c 01       	movw	r8, r24
 c02:	f3 2d       	mov	r31, r3
 c04:	f0 68       	ori	r31, 0x80	; 128
 c06:	3f 2e       	mov	r3, r31
 c08:	82 01       	movw	r16, r4
 c0a:	33 fc       	sbrc	r3, 3
 c0c:	19 c0       	rjmp	.+50     	; 0xc40 <vfprintf+0x1e0>
 c0e:	82 2d       	mov	r24, r2
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	88 16       	cp	r8, r24
 c14:	99 06       	cpc	r9, r25
 c16:	a0 f4       	brcc	.+40     	; 0xc40 <vfprintf+0x1e0>
 c18:	b6 01       	movw	r22, r12
 c1a:	80 e2       	ldi	r24, 0x20	; 32
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	33 d1       	rcall	.+614    	; 0xe86 <fputc>
 c20:	2a 94       	dec	r2
 c22:	f5 cf       	rjmp	.-22     	; 0xc0e <vfprintf+0x1ae>
 c24:	f5 01       	movw	r30, r10
 c26:	37 fc       	sbrc	r3, 7
 c28:	85 91       	lpm	r24, Z+
 c2a:	37 fe       	sbrs	r3, 7
 c2c:	81 91       	ld	r24, Z+
 c2e:	5f 01       	movw	r10, r30
 c30:	b6 01       	movw	r22, r12
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	28 d1       	rcall	.+592    	; 0xe86 <fputc>
 c36:	21 10       	cpse	r2, r1
 c38:	2a 94       	dec	r2
 c3a:	21 e0       	ldi	r18, 0x01	; 1
 c3c:	82 1a       	sub	r8, r18
 c3e:	91 08       	sbc	r9, r1
 c40:	81 14       	cp	r8, r1
 c42:	91 04       	cpc	r9, r1
 c44:	79 f7       	brne	.-34     	; 0xc24 <vfprintf+0x1c4>
 c46:	e1 c0       	rjmp	.+450    	; 0xe0a <vfprintf+0x3aa>
 c48:	84 36       	cpi	r24, 0x64	; 100
 c4a:	11 f0       	breq	.+4      	; 0xc50 <vfprintf+0x1f0>
 c4c:	89 36       	cpi	r24, 0x69	; 105
 c4e:	39 f5       	brne	.+78     	; 0xc9e <vfprintf+0x23e>
 c50:	f8 01       	movw	r30, r16
 c52:	37 fe       	sbrs	r3, 7
 c54:	07 c0       	rjmp	.+14     	; 0xc64 <vfprintf+0x204>
 c56:	60 81       	ld	r22, Z
 c58:	71 81       	ldd	r23, Z+1	; 0x01
 c5a:	82 81       	ldd	r24, Z+2	; 0x02
 c5c:	93 81       	ldd	r25, Z+3	; 0x03
 c5e:	0c 5f       	subi	r16, 0xFC	; 252
 c60:	1f 4f       	sbci	r17, 0xFF	; 255
 c62:	08 c0       	rjmp	.+16     	; 0xc74 <vfprintf+0x214>
 c64:	60 81       	ld	r22, Z
 c66:	71 81       	ldd	r23, Z+1	; 0x01
 c68:	07 2e       	mov	r0, r23
 c6a:	00 0c       	add	r0, r0
 c6c:	88 0b       	sbc	r24, r24
 c6e:	99 0b       	sbc	r25, r25
 c70:	0e 5f       	subi	r16, 0xFE	; 254
 c72:	1f 4f       	sbci	r17, 0xFF	; 255
 c74:	f3 2d       	mov	r31, r3
 c76:	ff 76       	andi	r31, 0x6F	; 111
 c78:	3f 2e       	mov	r3, r31
 c7a:	97 ff       	sbrs	r25, 7
 c7c:	09 c0       	rjmp	.+18     	; 0xc90 <vfprintf+0x230>
 c7e:	90 95       	com	r25
 c80:	80 95       	com	r24
 c82:	70 95       	com	r23
 c84:	61 95       	neg	r22
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	8f 4f       	sbci	r24, 0xFF	; 255
 c8a:	9f 4f       	sbci	r25, 0xFF	; 255
 c8c:	f0 68       	ori	r31, 0x80	; 128
 c8e:	3f 2e       	mov	r3, r31
 c90:	2a e0       	ldi	r18, 0x0A	; 10
 c92:	30 e0       	ldi	r19, 0x00	; 0
 c94:	a3 01       	movw	r20, r6
 c96:	33 d1       	rcall	.+614    	; 0xefe <__ultoa_invert>
 c98:	88 2e       	mov	r8, r24
 c9a:	86 18       	sub	r8, r6
 c9c:	44 c0       	rjmp	.+136    	; 0xd26 <vfprintf+0x2c6>
 c9e:	85 37       	cpi	r24, 0x75	; 117
 ca0:	31 f4       	brne	.+12     	; 0xcae <vfprintf+0x24e>
 ca2:	23 2d       	mov	r18, r3
 ca4:	2f 7e       	andi	r18, 0xEF	; 239
 ca6:	b2 2e       	mov	r11, r18
 ca8:	2a e0       	ldi	r18, 0x0A	; 10
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	25 c0       	rjmp	.+74     	; 0xcf8 <vfprintf+0x298>
 cae:	93 2d       	mov	r25, r3
 cb0:	99 7f       	andi	r25, 0xF9	; 249
 cb2:	b9 2e       	mov	r11, r25
 cb4:	8f 36       	cpi	r24, 0x6F	; 111
 cb6:	c1 f0       	breq	.+48     	; 0xce8 <vfprintf+0x288>
 cb8:	18 f4       	brcc	.+6      	; 0xcc0 <vfprintf+0x260>
 cba:	88 35       	cpi	r24, 0x58	; 88
 cbc:	79 f0       	breq	.+30     	; 0xcdc <vfprintf+0x27c>
 cbe:	ae c0       	rjmp	.+348    	; 0xe1c <vfprintf+0x3bc>
 cc0:	80 37       	cpi	r24, 0x70	; 112
 cc2:	19 f0       	breq	.+6      	; 0xcca <vfprintf+0x26a>
 cc4:	88 37       	cpi	r24, 0x78	; 120
 cc6:	21 f0       	breq	.+8      	; 0xcd0 <vfprintf+0x270>
 cc8:	a9 c0       	rjmp	.+338    	; 0xe1c <vfprintf+0x3bc>
 cca:	e9 2f       	mov	r30, r25
 ccc:	e0 61       	ori	r30, 0x10	; 16
 cce:	be 2e       	mov	r11, r30
 cd0:	b4 fe       	sbrs	r11, 4
 cd2:	0d c0       	rjmp	.+26     	; 0xcee <vfprintf+0x28e>
 cd4:	fb 2d       	mov	r31, r11
 cd6:	f4 60       	ori	r31, 0x04	; 4
 cd8:	bf 2e       	mov	r11, r31
 cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x28e>
 cdc:	34 fe       	sbrs	r3, 4
 cde:	0a c0       	rjmp	.+20     	; 0xcf4 <vfprintf+0x294>
 ce0:	29 2f       	mov	r18, r25
 ce2:	26 60       	ori	r18, 0x06	; 6
 ce4:	b2 2e       	mov	r11, r18
 ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <vfprintf+0x294>
 ce8:	28 e0       	ldi	r18, 0x08	; 8
 cea:	30 e0       	ldi	r19, 0x00	; 0
 cec:	05 c0       	rjmp	.+10     	; 0xcf8 <vfprintf+0x298>
 cee:	20 e1       	ldi	r18, 0x10	; 16
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x298>
 cf4:	20 e1       	ldi	r18, 0x10	; 16
 cf6:	32 e0       	ldi	r19, 0x02	; 2
 cf8:	f8 01       	movw	r30, r16
 cfa:	b7 fe       	sbrs	r11, 7
 cfc:	07 c0       	rjmp	.+14     	; 0xd0c <vfprintf+0x2ac>
 cfe:	60 81       	ld	r22, Z
 d00:	71 81       	ldd	r23, Z+1	; 0x01
 d02:	82 81       	ldd	r24, Z+2	; 0x02
 d04:	93 81       	ldd	r25, Z+3	; 0x03
 d06:	0c 5f       	subi	r16, 0xFC	; 252
 d08:	1f 4f       	sbci	r17, 0xFF	; 255
 d0a:	06 c0       	rjmp	.+12     	; 0xd18 <vfprintf+0x2b8>
 d0c:	60 81       	ld	r22, Z
 d0e:	71 81       	ldd	r23, Z+1	; 0x01
 d10:	80 e0       	ldi	r24, 0x00	; 0
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 5f       	subi	r16, 0xFE	; 254
 d16:	1f 4f       	sbci	r17, 0xFF	; 255
 d18:	a3 01       	movw	r20, r6
 d1a:	f1 d0       	rcall	.+482    	; 0xefe <__ultoa_invert>
 d1c:	88 2e       	mov	r8, r24
 d1e:	86 18       	sub	r8, r6
 d20:	fb 2d       	mov	r31, r11
 d22:	ff 77       	andi	r31, 0x7F	; 127
 d24:	3f 2e       	mov	r3, r31
 d26:	36 fe       	sbrs	r3, 6
 d28:	0d c0       	rjmp	.+26     	; 0xd44 <vfprintf+0x2e4>
 d2a:	23 2d       	mov	r18, r3
 d2c:	2e 7f       	andi	r18, 0xFE	; 254
 d2e:	a2 2e       	mov	r10, r18
 d30:	89 14       	cp	r8, r9
 d32:	58 f4       	brcc	.+22     	; 0xd4a <vfprintf+0x2ea>
 d34:	34 fe       	sbrs	r3, 4
 d36:	0b c0       	rjmp	.+22     	; 0xd4e <vfprintf+0x2ee>
 d38:	32 fc       	sbrc	r3, 2
 d3a:	09 c0       	rjmp	.+18     	; 0xd4e <vfprintf+0x2ee>
 d3c:	83 2d       	mov	r24, r3
 d3e:	8e 7e       	andi	r24, 0xEE	; 238
 d40:	a8 2e       	mov	r10, r24
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <vfprintf+0x2ee>
 d44:	b8 2c       	mov	r11, r8
 d46:	a3 2c       	mov	r10, r3
 d48:	03 c0       	rjmp	.+6      	; 0xd50 <vfprintf+0x2f0>
 d4a:	b8 2c       	mov	r11, r8
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x2f0>
 d4e:	b9 2c       	mov	r11, r9
 d50:	a4 fe       	sbrs	r10, 4
 d52:	0f c0       	rjmp	.+30     	; 0xd72 <vfprintf+0x312>
 d54:	fe 01       	movw	r30, r28
 d56:	e8 0d       	add	r30, r8
 d58:	f1 1d       	adc	r31, r1
 d5a:	80 81       	ld	r24, Z
 d5c:	80 33       	cpi	r24, 0x30	; 48
 d5e:	21 f4       	brne	.+8      	; 0xd68 <vfprintf+0x308>
 d60:	9a 2d       	mov	r25, r10
 d62:	99 7e       	andi	r25, 0xE9	; 233
 d64:	a9 2e       	mov	r10, r25
 d66:	09 c0       	rjmp	.+18     	; 0xd7a <vfprintf+0x31a>
 d68:	a2 fe       	sbrs	r10, 2
 d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x318>
 d6c:	b3 94       	inc	r11
 d6e:	b3 94       	inc	r11
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <vfprintf+0x31a>
 d72:	8a 2d       	mov	r24, r10
 d74:	86 78       	andi	r24, 0x86	; 134
 d76:	09 f0       	breq	.+2      	; 0xd7a <vfprintf+0x31a>
 d78:	b3 94       	inc	r11
 d7a:	a3 fc       	sbrc	r10, 3
 d7c:	10 c0       	rjmp	.+32     	; 0xd9e <vfprintf+0x33e>
 d7e:	a0 fe       	sbrs	r10, 0
 d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x32e>
 d82:	b2 14       	cp	r11, r2
 d84:	80 f4       	brcc	.+32     	; 0xda6 <vfprintf+0x346>
 d86:	28 0c       	add	r2, r8
 d88:	92 2c       	mov	r9, r2
 d8a:	9b 18       	sub	r9, r11
 d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x348>
 d8e:	b2 14       	cp	r11, r2
 d90:	58 f4       	brcc	.+22     	; 0xda8 <vfprintf+0x348>
 d92:	b6 01       	movw	r22, r12
 d94:	80 e2       	ldi	r24, 0x20	; 32
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	76 d0       	rcall	.+236    	; 0xe86 <fputc>
 d9a:	b3 94       	inc	r11
 d9c:	f8 cf       	rjmp	.-16     	; 0xd8e <vfprintf+0x32e>
 d9e:	b2 14       	cp	r11, r2
 da0:	18 f4       	brcc	.+6      	; 0xda8 <vfprintf+0x348>
 da2:	2b 18       	sub	r2, r11
 da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x34a>
 da6:	98 2c       	mov	r9, r8
 da8:	21 2c       	mov	r2, r1
 daa:	a4 fe       	sbrs	r10, 4
 dac:	0f c0       	rjmp	.+30     	; 0xdcc <vfprintf+0x36c>
 dae:	b6 01       	movw	r22, r12
 db0:	80 e3       	ldi	r24, 0x30	; 48
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	68 d0       	rcall	.+208    	; 0xe86 <fputc>
 db6:	a2 fe       	sbrs	r10, 2
 db8:	16 c0       	rjmp	.+44     	; 0xde6 <vfprintf+0x386>
 dba:	a1 fc       	sbrc	r10, 1
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <vfprintf+0x364>
 dbe:	88 e7       	ldi	r24, 0x78	; 120
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x368>
 dc4:	88 e5       	ldi	r24, 0x58	; 88
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	b6 01       	movw	r22, r12
 dca:	0c c0       	rjmp	.+24     	; 0xde4 <vfprintf+0x384>
 dcc:	8a 2d       	mov	r24, r10
 dce:	86 78       	andi	r24, 0x86	; 134
 dd0:	51 f0       	breq	.+20     	; 0xde6 <vfprintf+0x386>
 dd2:	a1 fe       	sbrs	r10, 1
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x37a>
 dd6:	8b e2       	ldi	r24, 0x2B	; 43
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x37c>
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	a7 fc       	sbrc	r10, 7
 dde:	8d e2       	ldi	r24, 0x2D	; 45
 de0:	b6 01       	movw	r22, r12
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	50 d0       	rcall	.+160    	; 0xe86 <fputc>
 de6:	89 14       	cp	r8, r9
 de8:	30 f4       	brcc	.+12     	; 0xdf6 <vfprintf+0x396>
 dea:	b6 01       	movw	r22, r12
 dec:	80 e3       	ldi	r24, 0x30	; 48
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	4a d0       	rcall	.+148    	; 0xe86 <fputc>
 df2:	9a 94       	dec	r9
 df4:	f8 cf       	rjmp	.-16     	; 0xde6 <vfprintf+0x386>
 df6:	8a 94       	dec	r8
 df8:	f3 01       	movw	r30, r6
 dfa:	e8 0d       	add	r30, r8
 dfc:	f1 1d       	adc	r31, r1
 dfe:	80 81       	ld	r24, Z
 e00:	b6 01       	movw	r22, r12
 e02:	90 e0       	ldi	r25, 0x00	; 0
 e04:	40 d0       	rcall	.+128    	; 0xe86 <fputc>
 e06:	81 10       	cpse	r8, r1
 e08:	f6 cf       	rjmp	.-20     	; 0xdf6 <vfprintf+0x396>
 e0a:	22 20       	and	r2, r2
 e0c:	09 f4       	brne	.+2      	; 0xe10 <vfprintf+0x3b0>
 e0e:	4e ce       	rjmp	.-868    	; 0xaac <vfprintf+0x4c>
 e10:	b6 01       	movw	r22, r12
 e12:	80 e2       	ldi	r24, 0x20	; 32
 e14:	90 e0       	ldi	r25, 0x00	; 0
 e16:	37 d0       	rcall	.+110    	; 0xe86 <fputc>
 e18:	2a 94       	dec	r2
 e1a:	f7 cf       	rjmp	.-18     	; 0xe0a <vfprintf+0x3aa>
 e1c:	f6 01       	movw	r30, r12
 e1e:	86 81       	ldd	r24, Z+6	; 0x06
 e20:	97 81       	ldd	r25, Z+7	; 0x07
 e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x3c8>
 e24:	8f ef       	ldi	r24, 0xFF	; 255
 e26:	9f ef       	ldi	r25, 0xFF	; 255
 e28:	2b 96       	adiw	r28, 0x0b	; 11
 e2a:	0f b6       	in	r0, 0x3f	; 63
 e2c:	f8 94       	cli
 e2e:	de bf       	out	0x3e, r29	; 62
 e30:	0f be       	out	0x3f, r0	; 63
 e32:	cd bf       	out	0x3d, r28	; 61
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	1f 91       	pop	r17
 e3a:	0f 91       	pop	r16
 e3c:	ff 90       	pop	r15
 e3e:	ef 90       	pop	r14
 e40:	df 90       	pop	r13
 e42:	cf 90       	pop	r12
 e44:	bf 90       	pop	r11
 e46:	af 90       	pop	r10
 e48:	9f 90       	pop	r9
 e4a:	8f 90       	pop	r8
 e4c:	7f 90       	pop	r7
 e4e:	6f 90       	pop	r6
 e50:	5f 90       	pop	r5
 e52:	4f 90       	pop	r4
 e54:	3f 90       	pop	r3
 e56:	2f 90       	pop	r2
 e58:	08 95       	ret

00000e5a <strnlen_P>:
 e5a:	fc 01       	movw	r30, r24
 e5c:	05 90       	lpm	r0, Z+
 e5e:	61 50       	subi	r22, 0x01	; 1
 e60:	70 40       	sbci	r23, 0x00	; 0
 e62:	01 10       	cpse	r0, r1
 e64:	d8 f7       	brcc	.-10     	; 0xe5c <strnlen_P+0x2>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	8e 0f       	add	r24, r30
 e6c:	9f 1f       	adc	r25, r31
 e6e:	08 95       	ret

00000e70 <strnlen>:
 e70:	fc 01       	movw	r30, r24
 e72:	61 50       	subi	r22, 0x01	; 1
 e74:	70 40       	sbci	r23, 0x00	; 0
 e76:	01 90       	ld	r0, Z+
 e78:	01 10       	cpse	r0, r1
 e7a:	d8 f7       	brcc	.-10     	; 0xe72 <strnlen+0x2>
 e7c:	80 95       	com	r24
 e7e:	90 95       	com	r25
 e80:	8e 0f       	add	r24, r30
 e82:	9f 1f       	adc	r25, r31
 e84:	08 95       	ret

00000e86 <fputc>:
 e86:	0f 93       	push	r16
 e88:	1f 93       	push	r17
 e8a:	cf 93       	push	r28
 e8c:	df 93       	push	r29
 e8e:	fb 01       	movw	r30, r22
 e90:	23 81       	ldd	r18, Z+3	; 0x03
 e92:	21 fd       	sbrc	r18, 1
 e94:	03 c0       	rjmp	.+6      	; 0xe9c <fputc+0x16>
 e96:	8f ef       	ldi	r24, 0xFF	; 255
 e98:	9f ef       	ldi	r25, 0xFF	; 255
 e9a:	2c c0       	rjmp	.+88     	; 0xef4 <fputc+0x6e>
 e9c:	22 ff       	sbrs	r18, 2
 e9e:	16 c0       	rjmp	.+44     	; 0xecc <fputc+0x46>
 ea0:	46 81       	ldd	r20, Z+6	; 0x06
 ea2:	57 81       	ldd	r21, Z+7	; 0x07
 ea4:	24 81       	ldd	r18, Z+4	; 0x04
 ea6:	35 81       	ldd	r19, Z+5	; 0x05
 ea8:	42 17       	cp	r20, r18
 eaa:	53 07       	cpc	r21, r19
 eac:	44 f4       	brge	.+16     	; 0xebe <fputc+0x38>
 eae:	a0 81       	ld	r26, Z
 eb0:	b1 81       	ldd	r27, Z+1	; 0x01
 eb2:	9d 01       	movw	r18, r26
 eb4:	2f 5f       	subi	r18, 0xFF	; 255
 eb6:	3f 4f       	sbci	r19, 0xFF	; 255
 eb8:	31 83       	std	Z+1, r19	; 0x01
 eba:	20 83       	st	Z, r18
 ebc:	8c 93       	st	X, r24
 ebe:	26 81       	ldd	r18, Z+6	; 0x06
 ec0:	37 81       	ldd	r19, Z+7	; 0x07
 ec2:	2f 5f       	subi	r18, 0xFF	; 255
 ec4:	3f 4f       	sbci	r19, 0xFF	; 255
 ec6:	37 83       	std	Z+7, r19	; 0x07
 ec8:	26 83       	std	Z+6, r18	; 0x06
 eca:	14 c0       	rjmp	.+40     	; 0xef4 <fputc+0x6e>
 ecc:	8b 01       	movw	r16, r22
 ece:	ec 01       	movw	r28, r24
 ed0:	fb 01       	movw	r30, r22
 ed2:	00 84       	ldd	r0, Z+8	; 0x08
 ed4:	f1 85       	ldd	r31, Z+9	; 0x09
 ed6:	e0 2d       	mov	r30, r0
 ed8:	09 95       	icall
 eda:	89 2b       	or	r24, r25
 edc:	e1 f6       	brne	.-72     	; 0xe96 <fputc+0x10>
 ede:	d8 01       	movw	r26, r16
 ee0:	16 96       	adiw	r26, 0x06	; 6
 ee2:	8d 91       	ld	r24, X+
 ee4:	9c 91       	ld	r25, X
 ee6:	17 97       	sbiw	r26, 0x07	; 7
 ee8:	01 96       	adiw	r24, 0x01	; 1
 eea:	17 96       	adiw	r26, 0x07	; 7
 eec:	9c 93       	st	X, r25
 eee:	8e 93       	st	-X, r24
 ef0:	16 97       	sbiw	r26, 0x06	; 6
 ef2:	ce 01       	movw	r24, r28
 ef4:	df 91       	pop	r29
 ef6:	cf 91       	pop	r28
 ef8:	1f 91       	pop	r17
 efa:	0f 91       	pop	r16
 efc:	08 95       	ret

00000efe <__ultoa_invert>:
 efe:	fa 01       	movw	r30, r20
 f00:	aa 27       	eor	r26, r26
 f02:	28 30       	cpi	r18, 0x08	; 8
 f04:	51 f1       	breq	.+84     	; 0xf5a <__ultoa_invert+0x5c>
 f06:	20 31       	cpi	r18, 0x10	; 16
 f08:	81 f1       	breq	.+96     	; 0xf6a <__ultoa_invert+0x6c>
 f0a:	e8 94       	clt
 f0c:	6f 93       	push	r22
 f0e:	6e 7f       	andi	r22, 0xFE	; 254
 f10:	6e 5f       	subi	r22, 0xFE	; 254
 f12:	7f 4f       	sbci	r23, 0xFF	; 255
 f14:	8f 4f       	sbci	r24, 0xFF	; 255
 f16:	9f 4f       	sbci	r25, 0xFF	; 255
 f18:	af 4f       	sbci	r26, 0xFF	; 255
 f1a:	b1 e0       	ldi	r27, 0x01	; 1
 f1c:	3e d0       	rcall	.+124    	; 0xf9a <__ultoa_invert+0x9c>
 f1e:	b4 e0       	ldi	r27, 0x04	; 4
 f20:	3c d0       	rcall	.+120    	; 0xf9a <__ultoa_invert+0x9c>
 f22:	67 0f       	add	r22, r23
 f24:	78 1f       	adc	r23, r24
 f26:	89 1f       	adc	r24, r25
 f28:	9a 1f       	adc	r25, r26
 f2a:	a1 1d       	adc	r26, r1
 f2c:	68 0f       	add	r22, r24
 f2e:	79 1f       	adc	r23, r25
 f30:	8a 1f       	adc	r24, r26
 f32:	91 1d       	adc	r25, r1
 f34:	a1 1d       	adc	r26, r1
 f36:	6a 0f       	add	r22, r26
 f38:	71 1d       	adc	r23, r1
 f3a:	81 1d       	adc	r24, r1
 f3c:	91 1d       	adc	r25, r1
 f3e:	a1 1d       	adc	r26, r1
 f40:	20 d0       	rcall	.+64     	; 0xf82 <__ultoa_invert+0x84>
 f42:	09 f4       	brne	.+2      	; 0xf46 <__ultoa_invert+0x48>
 f44:	68 94       	set
 f46:	3f 91       	pop	r19
 f48:	2a e0       	ldi	r18, 0x0A	; 10
 f4a:	26 9f       	mul	r18, r22
 f4c:	11 24       	eor	r1, r1
 f4e:	30 19       	sub	r19, r0
 f50:	30 5d       	subi	r19, 0xD0	; 208
 f52:	31 93       	st	Z+, r19
 f54:	de f6       	brtc	.-74     	; 0xf0c <__ultoa_invert+0xe>
 f56:	cf 01       	movw	r24, r30
 f58:	08 95       	ret
 f5a:	46 2f       	mov	r20, r22
 f5c:	47 70       	andi	r20, 0x07	; 7
 f5e:	40 5d       	subi	r20, 0xD0	; 208
 f60:	41 93       	st	Z+, r20
 f62:	b3 e0       	ldi	r27, 0x03	; 3
 f64:	0f d0       	rcall	.+30     	; 0xf84 <__ultoa_invert+0x86>
 f66:	c9 f7       	brne	.-14     	; 0xf5a <__ultoa_invert+0x5c>
 f68:	f6 cf       	rjmp	.-20     	; 0xf56 <__ultoa_invert+0x58>
 f6a:	46 2f       	mov	r20, r22
 f6c:	4f 70       	andi	r20, 0x0F	; 15
 f6e:	40 5d       	subi	r20, 0xD0	; 208
 f70:	4a 33       	cpi	r20, 0x3A	; 58
 f72:	18 f0       	brcs	.+6      	; 0xf7a <__ultoa_invert+0x7c>
 f74:	49 5d       	subi	r20, 0xD9	; 217
 f76:	31 fd       	sbrc	r19, 1
 f78:	40 52       	subi	r20, 0x20	; 32
 f7a:	41 93       	st	Z+, r20
 f7c:	02 d0       	rcall	.+4      	; 0xf82 <__ultoa_invert+0x84>
 f7e:	a9 f7       	brne	.-22     	; 0xf6a <__ultoa_invert+0x6c>
 f80:	ea cf       	rjmp	.-44     	; 0xf56 <__ultoa_invert+0x58>
 f82:	b4 e0       	ldi	r27, 0x04	; 4
 f84:	a6 95       	lsr	r26
 f86:	97 95       	ror	r25
 f88:	87 95       	ror	r24
 f8a:	77 95       	ror	r23
 f8c:	67 95       	ror	r22
 f8e:	ba 95       	dec	r27
 f90:	c9 f7       	brne	.-14     	; 0xf84 <__ultoa_invert+0x86>
 f92:	00 97       	sbiw	r24, 0x00	; 0
 f94:	61 05       	cpc	r22, r1
 f96:	71 05       	cpc	r23, r1
 f98:	08 95       	ret
 f9a:	9b 01       	movw	r18, r22
 f9c:	ac 01       	movw	r20, r24
 f9e:	0a 2e       	mov	r0, r26
 fa0:	06 94       	lsr	r0
 fa2:	57 95       	ror	r21
 fa4:	47 95       	ror	r20
 fa6:	37 95       	ror	r19
 fa8:	27 95       	ror	r18
 faa:	ba 95       	dec	r27
 fac:	c9 f7       	brne	.-14     	; 0xfa0 <__ultoa_invert+0xa2>
 fae:	62 0f       	add	r22, r18
 fb0:	73 1f       	adc	r23, r19
 fb2:	84 1f       	adc	r24, r20
 fb4:	95 1f       	adc	r25, r21
 fb6:	a0 1d       	adc	r26, r0
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
